from uuid import UUID
from langchain_core.agents import AgentFinish
import streamlit as st
from typing import Any, Dict, List
from langchain_core.callbacks import BaseCallbackHandler
class StreamlitHandler(BaseCallbackHandler):
    """A custom handler for logging interactions within the process chain."""
    
    def __init__(self, agent_name: str) -> None:
        super().__init__()
        self.agent_name = agent_name

    def on_chain_start(self, serialized: Dict[str, Any], outputs: Dict[str, Any], **kwargs: Any) -> None:
        """Log the start of a chain with user input."""
        # st.session_state.messages.append({"role": "assistant", "content": outputs['input']})
        # st.chat_message("assistant").write(outputs['input'])
        st.session_state.messages.append({"role": "assistant", "content": f"{self.agent_name} started work...."})
        st.chat_message("assistant").write(f"{self.agent_name} started work....")
        
    def on_agent_action(self, serialized: Dict[str, Any], inputs: Dict[str, Any], **kwargs: Any) -> None:
        """""Log the action taken by an agent during a chain run."""
        st.session_state.messages.append({"role": "assistant", "content": inputs['input']})
        st.chat_message("assistant").write(inputs['input'])

    def on_agent_finish(self, finish: AgentFinish, *, run_id: UUID, parent_run_id: UUID | None = None, **kwargs: Any) -> Any:
        """Log the finish of an agent."""
        st.session_state.messages.append({"role": self.agent_name, "content": finish.output})
        st.chat_message(self.agent_name).write(finish.output)
        
    def on_chain_end(self, outputs: Dict[str, Any], **kwargs: Any) -> None:
        """Log the end of a chain with the output generated by an agent."""
        st.session_state.messages.append({"role": self.agent_name, "content": outputs['output']})
        st.chat_message(self.agent_name).write(outputs['output'])

    
    